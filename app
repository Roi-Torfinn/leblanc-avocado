import os
import streamlit as st
from langchain.llms import OpenAI as LangchainOpenAI

# Configuration d'OpenAI avec votre cl√© d'API
os.environ['OPENAI_API_KEY'] = st.secrets["auth"]

# Configuration de la page
st.set_page_config(page_title='G√©n√©rateur de Messages pour Avocats', page_icon="‚öñÔ∏è", layout="wide", initial_sidebar_state="expanded")


# Titre avec emoji
st.title('G√©n√©rateur de Messages pour Avocats üìú')

# Paragraphe introductif
st.write("""
Ce g√©n√©rateur est con√ßu pour aider les avocats √† r√©diger des messages professionnels rapidement et efficacement. 
Que ce soit pour communiquer avec des clients, des coll√®gues ou d'autres parties prenantes, cet outil offre une vari√©t√© de mod√®les de messages adapt√©s √† diverses situations juridiques. 
Il suffit de s√©lectionner la cat√©gorie et le type de message, de fournir les d√©tails n√©cessaires, et le g√©n√©rateur produira un message adapt√© √† vos besoins. 
Gagnez du temps et assurez-vous que vos communications sont claires et professionnelles.
""")

# Note sur le caract√®re provisoire du projet
st.warning("""
‚ö†Ô∏è Ce projet est actuellement en phase b√™ta. Il est con√ßu pour d√©montrer les possibilit√©s d'utilisation de l'automatisation dans le domaine juridique. 
Pour plus d'informations ou des demandes sp√©cifiques, veuillez nous contacter via [leblanc-automatisation-ia.ch](https://leblanc-automatisation-ia.ch/).
""")

# Cat√©gories et sous-cat√©gories de messages
categories = {
    "Communication avec les clients": ["Mise √† jour du dossier", "Demande de documents", "Rendez-vous", "Facturation", "Feedback"],
    "Relations avec les tribunaux": ["Demande d'audience", "Soumission de documents", "Demande de report", "Confirmation de pr√©sence", "Demande d'informations"],
    "Interactions avec les adversaires": ["N√©gociation", "Demande de documents", "Proposition de r√®glement", "Notification", "Demande de rendez-vous"],
    "Demandes √† des experts": ["Demande d'expertise", "Rendez-vous", "Soumission de documents", "Feedback", "Facturation"],
    "Correspondance avec les t√©moins": ["Demande de t√©moignage", "Confirmation de pr√©sence", "Pr√©paration", "Remerciements", "Feedback"],
    "Relations avec les m√©dias": ["Communiqu√© de presse", "Interview", "Clarification", "Demande de correction", "Invitation √† un √©v√©nement"],
    "Gestion interne du cabinet": ["Mise √† jour aux partenaires", "Demande de ressources", "Planification de r√©unions", "Feedback sur un cas", "Notifications g√©n√©rales"]
}

# S√©lection de la cat√©gorie et de la sous-cat√©gorie
categorie = st.selectbox('S√©lectionnez une cat√©gorie:', list(categories.keys()))
sous_categorie = st.selectbox('S√©lectionnez une sous-cat√©gorie:', categories[categorie])

# Format de message
format_message = st.radio("Format du message:", ["Lettre", "E-mail"])

# Informations de base
st.header('Informations de Base ‚öôÔ∏è')
nom = st.text_input('Votre nom complet')
adresse = st.text_input('Votre adresse')
date = st.date_input('Date du message')
societe = st.text_input('Nom de la soci√©t√© ou de l entit√© concern√©e')
adresse_societe = st.text_input("Adresse de la soci√©t√© ou de l'entit√© concern√©e")
telephone = st.text_input("Votre num√©ro de t√©l√©phone")
email = st.text_input("Votre adresse e-mail")

# Informations sur le destinataire
st.header('Informations sur le Destinataire üì¨')
nom_destinataire = st.text_input("Nom du destinataire")
adresse_destinataire = st.text_input("Adresse du destinataire")

# D√©tails suppl√©mentaires
st.header('D√©tails Suppl√©mentaires üñäÔ∏è')
details = st.text_area('D√©tails ou informations suppl√©mentaires concernant votre demande')

# G√©n√©rer le message
def generate_message(categorie, sous_categorie, format_message, nom, adresse, date, details, societe, adresse_societe, telephone, email, nom_destinataire, adresse_destinataire):
    llm = LangchainOpenAI(model_name='gpt-3.5-turbo-16k', temperature=0.2)
    prompt = f"G√©n√©rer un message de type {sous_categorie} (format: {format_message}) pour {nom} r√©sidant √† {adresse} dat√© du {date}, concernant {societe} situ√©e √† {adresse_societe}. D√©tails suppl√©mentaires : {details}. Contact : {telephone}, {email}. Destinataire : {nom_destinataire}, {adresse_destinataire}"
    response = llm.predict(prompt)
    return response

if st.button('G√©n√©rer le message üöÄ'):
    message = generate_message(categorie, sous_categorie, format_message, nom, adresse, date, details, societe, adresse_societe, telephone, email, nom_destinataire, adresse_destinataire)
    st.subheader('Message G√©n√©r√© üìÑ')
    st.text_area("", message, height=300)

# Section d'aide et de support
st.sidebar.header('Aide & Support üÜò')
st.sidebar.text("Besoin d'aide ?")
st.sidebar.text("Consultez notre FAQ ou contactez-nous directement.")
